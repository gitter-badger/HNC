 -- Модуль вывода типов
ATTR ASTExpression ExpressionList Definition LetIn
	[
		generalizedTypes : {M.Map String GType}
		finalSubstitution : {MT.MyStack ()}
	|
		counter : Int
	|
	]

ATTR Definition
	[ | | generalizedTypeM : {MT.MyStack GType} ]

ATTR ASTExpression LetIn
	[ | | tauM : {MT.MyStack (UTerm MT.T IntVar)} ]

ATTR ExpressionList
	[ | | tauM USE {:} {[]} : {[MT.MyStack (UTerm MT.T IntVar)]} ]

SEM Definition
	| Definition
		-- arguments get fresh type variables
		where.counter = @lhs.counter + length @params
		loc.argAtoms = MT.freshAtoms @params @lhs.counter
		where.generalizedTypes = M.union (M.fromList @loc.argAtoms) @lhs.generalizedTypes

		-- generalizedType используется алгоритмом W _ДО_ того, как создается finalSubstitution
		loc.generalizedTypeM = { if null @params
			then MT.emptyClosureM @where.tauM
			else do
 				(genVars, tau) <- MT.closureM
					(mapM (MT.convert . snd) $ M.elems @lhs.generalizedTypes)
		 			(mapM (MT.convertTv . snd . snd) @loc.argAtoms)
					@where.tauM
				rm <- MT.getReverseMap
				let revertTv x = tracedUncondLookup "closureM" x rm
				convTau2 <- MT.runApply tau
				return (S.map revertTv genVars, MT.revert convTau2 rm)
		}



SEM LetIn
	| Let
		tl.generalizedTypes = M.insert @hd.name (MT.runStack @hd.generalizedTypeM) @lhs.generalizedTypes
		lhs.tauM = fmap snd @hd.generalizedTypeM >> @tl.tauM

SEM ASTExpression
	| Constant
		lhs.tauM = MT.constantType @c
	| Atom
		(lhs.counter, loc.tauM) = xtrace "atom.tau" $ MT.instantiatedType @lhs.counter $ tracedUncondLookup "MilnerTools.lookupAndInstantiate" @name @lhs.generalizedTypes
	| Application
		fn.counter = @lhs.counter + 1
		lhs.tauM = MT.unifyM @fn.tauM @arg.tauM $ MT.convertTv $ tv @lhs.counter
