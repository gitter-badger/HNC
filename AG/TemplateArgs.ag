-- Модуль полиморфизма
-- На основе информации, собранной модулем вывода типов, вычисляет формальные (в объявлениях контекстов и
-- функций) и фактические (в типах переменных, типах аргументов функции, типах возврата функций и в выражениях)
-- шаблонные аргументы
--
ATTR ASTLetIn
	[ | | definitionTv USE {`S.union`} {S.empty} : {S.Set String} ]

ATTR ASTDefinition
	[ | | definitionTv : {S.Set String} ]

SEM ASTDefinition
	| Definition
		-- шаблонные переменные контекста верхнего уровня
		lhs.definitionTv = typeTv @loc.definitionType
		loc.contextTemplateArgs = S.toList $ S.unions (@where.definitionTv : @loc.argsTv)
		loc.templateArgs = fst @loc.generalizedType

ATTR ASTExpression ASTLetIn ASTDefinition ExpressionList
	[ abstractedTv : {S.Set String} | | ]

SEM Root
	| Cons
		hd.abstractedTv = S.empty

SEM ASTDefinition
	| Definition
		where.abstractedTv = S.union @lhs.abstractedTv @loc.templateArgs


SEM ASTDefinition
	| Definition
		-- definitionType - "исправленные" типы, содержащих
		-- non-generic type variables (термин Карделли)
		-- такие "необобщенные типовые переменные" возникают, если в результате
		-- анализа тела определения получается, что свободная переменная может
		-- иметь любой тип:
		-- let x = 2 in y = i
		-- для терма "i" алгоритм W выводит _МОНОТИП_ вида t324, где t324 - свободная
		-- типовая переменная. В противоположность политипу вида forall t324 . t324,
		-- в котором t324 - связанная типовая переменная
		--
		-- связывание типовых переменных с помощью квантификатора выполняет функция
		-- closure (термин Милнера), принимающая тип и типовое окружение и
		-- возвращающая тип, в котором некоторые типовые переменные квантифицированы
		--
		-- По историческим причинам вместо явных кванторов forall используются два вида
		-- типовых переменных - TV для неквантифицированных и TU для квантифицированных
		-- (описано в SPL.Types.T). Благо из-за shallow types квантор может находиться
		-- только в одном месте - в начале политипа
		--
		-- TU используются очень ограниченно - в MilnerTools.closure создаются, а в
		-- MilnerClosure.instantiatedType уничтожаются (introduction/elimination)
		--
		loc.definitionType = addTU @loc.templateArgs $ MT.runStack $ @lhs.finalSubstitution >> @loc.generalizedTypeM >>= MT.subst . snd
		loc.generalizedType = MT.runStack $ @loc.generalizedTypeM

SEM ASTExpression
	| Atom
		-- дополнительно к Милнеровским s и tau, вычисляются
		-- * definitionType - тип атома в месте определения
		-- * callSiteType - тип атома в месте использования
		-- Унификацией этих типов можно найти фактические шаблонные
		-- аргументы
		-- Например:
		-- print имеет в месте определения   inferredType =   a -> IO void,
 		-- а в некотором месте использования callSiteType = int -> IO void.
 		--
		-- Унификацией этих типов можно найти значение a в месте использования,
 		-- и явно указать его шаблонным аргументом: print<int>(2 + x), если
		-- это требует система типов С++ ("компилятор С++ не может вывести тип").
		loc.templateArgs = MT.runStack $ @lhs.finalSubstitution >> MT.templateArgs @loc.tauM (tracedUncondLookup "Atom.definitionType" @name @lhs.generalizedTypes)
