
ATTR Root ASTLetIn
	[ | | leanDefinition USE {:} {[]} : {[String]} ]

ATTR ASTDefinition
	[ | | leanDefinition : String ]

ATTR ASTLetIn ASTExpression
	[ | | lean' : ASTExpression ]

ATTR ExpressionList [ | | lean' USE {:} {[]} : {[ASTExpression]} ]

SEM ASTDefinition
	| Definition
		lhs.leanDefinition = {
			@name ++ leanTA @loc.templateArgs ++ (if @loc.isFunction
				then concat (zipWith fff @params $ leanArgs @loc.definitionType) ++ " : " ++ showT (leanRet @loc.definitionType)
				else  " : " ++ showT @loc.definitionType) ++ " := " ++ leanShowLet (@where.leanDefinition) ++ showE @where.lean'
		}

SEM ASTLetIn
	| In
		lhs.lean' = @value.lean'

SEM ASTExpression
	| Constant
		lhs.lean' = Constant @c
	| Atom
		lhs.lean' = { if null @loc.templateArgs
			then Atom @name
			else Application (Atom @name) (map type2app @loc.templateArgs)
		}
	| Application
		lhs.lean' = Application @fn.lean' @arg.lean'

{
extractLean def inh = showRoot $ leanDefinition_Syn_Root $ wrap_Root (sem_Root def) inh

type2app (T x) = Atom x
type2app (TV x) = Atom x
type2app (TU x) = Atom x
type2app _ = Atom "LeanExtractorERROR942"

leanShowLet x = concatMap f x where
	f x = "let " ++ x ++ " in "

fff var t = " " ++ inParens (var ++ " : " ++ showT t)

leanRet (TT l) = last l

leanArgs (TT l) = init l

leanTA x = concatMap (\x -> " " ++ inParens (x ++ " : *")) x

showRoot x = "definition " ++ head x ++ "\n"

showLeanArgs x = concatMap f x where
	f (T x) = " " ++ x
	f x = " " ++ showT x

showT (TD a b) = a ++ " " ++ joinStr " " (map showT b)
showT (TT a) = joinStr " -> " (map showT a)
showT (T x) = x
showT (TU x) = x
showT (TV x) = x
showT x = show x
}
